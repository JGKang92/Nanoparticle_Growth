restoredefaultpath
clear
clc
addpath("functions")
close all
%% filenames and foldernames where fitdata exist
folderNames = ["Pt(acac)2_monomeric","Pt(COD)Cl2","Au","Pt_ex_situ","Iron_oxide","CdSe"];

% replace the directory name into the directory where fitdata exist
dirNameList = ["??","???"];

% replace the file name into the file generated by fitting
fileNames = [ ...
    "GamultiobjOptions????????????.mat", ... 1_0
    ; ...Pt(acac)2_monomeric
    %---------------------------------------------% 
    "GamultiobjOptions????????????.mat", ... 1_0 
    ; ... Pt(COD)Cl2
    %---------------------------------------------%
    "GamultiobjOptions????????????.mat", ... 1_0 
    ; ... Au
    %---------------------------------------------%
    "GamultiobjOptions????????????.mat", ... 1
    ; ... Pt_ex_situ
    %---------------------------------------------%
    "GamultiobjOptions????????????.mat", ... 1
    ; ...Iron_oxide
    %---------------------------------------------%
    "GamultiobjOptions????????????.mat", ... 1
    ; ... CdSe
    %---------------------------------------------%
    ];
colors = [0.2588    0.3725    0.1020; % dark green #425f1a
          0.4660    0.6740    0.1880; % green #77ac30
          0.9290    0.6940    0.1250; % gold #edb120
          0         0.4470    0.7410; % blue #0071bd
          0.3010    0.7450    0.9330; % cyan #4dbeee
          0.6350    0.0780    0.1840; % red ##a2142f
          0.8500    0.3250    0.0980; % orange ##d95319
          0.4980    0.0471    0.4902; % purple ##7f0c7d
          0.4941    0.1490    0.9765; % violet ##7e26f9
          0.7961    0.6275    0.9490; % lavender ##caa0f2
          % 0.7451    0.2235    0.7451; % pink ##be39be
          ]; 
sysNames = ["Pt(acac)2_in-situ", "Pt(COD)Cl2_in-situ", "HAuCl4_in-situ", ...
    "Pt(acac)2_ex-situ", "FexOy_ex-situ", "CdSe_ex-situ"];
situList = {"in","in","in","ex2","ex2","ex2"};
%% load experimental data
ed_PtAIn = load(fullfile("Pt(acac)2_monomeric","expdata_Ptacac2.mat"));
ed_PtCIn = load(fullfile("Pt(COD)Cl2","expdata_PtCOD.mat")); %ed_PtCIn = sampling_expdata(ed_PtCIn, 1, 2);
ed_AuIn = load(fullfile("Au","expdata_Au.mat")); %ed_AuIn = sampling_expdata(ed_AuIn, 1, 2);
ed_PtEx = load(fullfile("Pt_ex_situ","experiment_r3_PtEx_right.mat"));
ed_FeEx = load(fullfile("Iron_oxide","experiment_r3_iron_oxide_right.mat")); 
ed_CdEx = load(fullfile("CdSe","experiment_r3_CdSe_right.mat"));
edList0 = {ed_PtAIn, ed_PtCIn, ed_AuIn, ed_PtEx, ed_FeEx, ed_CdEx};
%% load fitdata
fdLists0 = cell(size(fileNames));
for ii = 1:size(fdLists0,1) 
    for jj = 1:size(fdLists0,2)
        fd = load_fitdata(fileNames(ii,jj), fullfile(folderNames(ii), dirNameList));
    end
end
fdLists = fdLists0;
%% For in-situ fitdata, re-calculate scores if cost is weighted.
for ii = 1:3
    ed = edList0{ii};
    situ = situList{ii};
    for jj = 1:size(fdLists,2)
        fd = fdLists{ii,jj}; 
        if isempty(fd)
            continue
        elseif ~fd.finished
            continue
        else
            fd_new = fd;
            opt = fd.other_opt;
            w = opt.weights;
            lent = cellfun(@numel, opt.indices);
            lent = unique(lent(lent~=1));
            if ~isscalar(lent)
                error("lent should be scalar")
            end
            if ~isempty(find(w~=1,1))
                fprintf("Non-weighted Jn cost will be re-calculated\n")
                fd_new.scores_new = Calculate_new_jn_score(fd_new, ed, situ);
            else
                fprintf("Nothing to do %d/%d %d/%d\n",ii,size(fdLists,1),jj, size(fdLists,2))
            end
            fdLists{ii,jj} = fd_new;
        end
    end
end
%% Selecting Strategy 
clc
threshold = 1e-5;
idxLists1 = nan(size(fdLists));
for ii = 1:size(fdLists,1)
    for jj = 1:size(fdLists,2)
        fd = fdLists{ii,jj};
        if isempty(fd)
            continue
        elseif ~fd.finished
            continue
        else
            [fd.xfit, idxLists1(ii,jj)] = pick_param(fd, threshold);
        end
        fdLists{ii,jj} = fd;
    end
end
%% post-processing
reLists = cellfun(@(x)struct(), fdLists, UniformOutput = false);
TFList = logical([1, 1, 0, 0, 0, 0]);
t0idxList = [33, 35, 86, find(ed_FeEx.timedata == 3), find(ed_CdEx.timedata == 10), 3];
edLists_processed = cell(size(edList0));
for ii = size(fdLists, 1):-1:1
    ed = edList0{ii};
    situ = situList{ii};
    TF = TFList(ii);
    t0idx = t0idxList(ii);
    for jj = size(fdLists, 2):-1:1
        fd = fdLists{ii,jj};
        if isempty(fd)
            continue
        elseif ~fd.finished
            continue
        end
        re = reLists{ii,jj};
        idx = idxLists1(ii,jj);
        fd.xfit = fd.population(idx,:);
        [reLists{ii,jj}, ~, edLists_processed{ii,jj}] = post_processing(re, fd, ed, fd.other_opt, ...
            {}, [], [], situ, TF, t0idx);
        fprintf("%d/%d %d/%d\n",ii,size(fdLists,1), jj, size(fdLists, 2))
    end
end
%% save data
save("fd.mat",'fdLists','-v7.3')
save("re.mat",'reLists','-v7.3')
save("ed.mat",'edLists_processed','-v7.3')
%% Finally chosen result
PtA = save_np(edLists_processed, fdLists, reLists, 1, 1);
PtC = save_np(edLists_processed, fdLists, reLists, 2, 1);
Au = save_np(edLists_processed, fdLists, reLists, 3, 1);
PtE = save_np(edLists_processed, fdLists, reLists, 4, 1);
Fe = save_np(edLists_processed, fdLists, reLists, 5, 1);
Cd = save_np(edLists_processed, fdLists, reLists, 6, 1);
save("Pt_acac_2.mat",'-struct','PtA')
save("Pt_COD_Cl_2.mat",'-struct','PtC')
save("AuHCl_4.mat",'-struct','Au')
save("Pt_ex.mat",'-struct','PtE')
save("Fe_xO_y.mat",'-struct','Fe')
save("CdSe.mat",'-struct','Cd')
%% functions
function y = load_fitdata(filename, dirNameList)
    n = numel(dirNameList);
    y = [];
    for ii = 1:n
        dirName = dirNameList(ii);
        fullFileName = fullfile(dirName, filename);
        if isfile(fullFileName)
            y = load(fullFileName);
            break
        else
            continue
        end
    end
    errmsg = sprintf("Cannot finnd %s in ", filename);
    for jj = 1:n
        if jj == n
            errmsg = errmsg + sprintf("%s", dirNameList(jj));
        else
            errmsg = errmsg + sprintf("%s, ", dirNameList(jj));
        end
    end
    warning(errmsg)
end
function scores_new = Calculate_new_jn_score(fd, ed, situ)
    if isfield(fd, "scores")
        scores_new = fd.scores;
    else
        scores_new = nan(size(fd.population,1),2);
    end
    opt = fd.other_opt;
    w = opt.weights;
    lent = cellfun(@numel, opt.indices);
    lent = unique(lent(lent~=1));
    if ~isscalar(lent)
        error("lent should be scalar")
    end
    if ~isempty(find(w~=1,1)) || ~isfield(fd,"scores")
        pop = fd.population;
        opt.weights = ones(size(w));
        switch situ
            case "in"
                parfor ii = 1:size(pop, 1)
                    scores_new(ii,1) = Calculate_Cost_In_situ_fast(pop(ii,:), ed, opt);
                end
            case "ex2"
                ind6 = opt.indices{6};
                IP = opt.IP_method;
                sw = opt.smooth_window;
                parfor ii = 1:size(pop, 1)
                    ed_new = r2n_optim(ed, pop(ii,ind6), IP, sw);
                    scores_new(ii,1) = Calculate_Cost_Ex_situ_fast2(pop(ii,:), ed_new, opt);
                end
            otherwise
                error("Not supported")
        end
        disp("Jn cost is re-calculated for non-weighted case")
    else
        disp("Jn cost is not weighted")
    end
end
function np = save_np(edLists_processed, fdLists, reLists, i, j)
    np = struct();
    np.expdata = edLists_processed{i,j};
    np.fitdata = fdLists{i,j};
    np.result = reLists{i,j};
end